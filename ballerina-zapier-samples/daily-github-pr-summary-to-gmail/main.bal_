import ballerina/http;
import ballerina/log;
import ballerina/task;
import ballerina/time;
import ballerinax/googleapis.gmail;

configurable string gmailRefreshToken = ?;
configurable string gmailClientId = ?;
configurable string gmailClientSecret = ?;
configurable string gmailRecipient = ?;

configurable string githubPAT = ?;
configurable string githubIssueLabel = ?;
configurable string githubOrg = ?;

type Issue record {
    string title;
};

type IssueData record {
    int total_count;
    Issue[] items;
};

gmail:ConnectionConfig gmailConfig = {
    auth: {
        refreshUrl: gmail:REFRESH_URL,
        refreshToken: gmailRefreshToken,
        clientId: gmailClientId,
        clientSecret: gmailClientSecret
    }
};
final gmail:Client gmailClient = check new (gmailConfig);

final http:Client github = check new ("https://api.github.com");
final map<string> headers = {
    "Accept": "application/vnd.github.v3+json",
    "Authorization": "token " + githubPAT
};

class Job {

    *task:Job;

    public function execute() {
        string|error yesterdayDate = getYesterdayDate();
        if yesterdayDate is error {
            log:printError("Error occurred while retrieving yesterday's date", yesterdayDate);
            return;
        }
        string param = string `created:>${yesterdayDate}+org:${githubOrg}+label:${githubIssueLabel}`;
        log:printInfo("Query: " + param);
        IssueData|error issueData = github->/search/issues(headers, params = {"q": param});
        if issueData is error {
            log:printError("Error occurred while retrieving issue data", issueData);
            return;
        }
        gmail:Message|error msgResponse = gmailClient->sendMessage(transform(issueData));
        if msgResponse is error {
            log:printError("Error occurred while sending email", msgResponse);
        }
    }
}

public function main() returns error? {
    _ = check task:scheduleJobRecurByFrequency(new Job(), 86400);
    while true {
        //Keep the program running until the user interrupts.
    }
}

function transform(IssueData issueData) returns gmail:MessageRequest {
    return {
        recipient: gmailRecipient,
        subject: "[Github Summary] Issue Count",
        messageBody: constructMailBody(issueData),
        contentType: gmail:TEXT_PLAIN
    };
}

function constructMailBody(IssueData issueData) returns string {
    string mailBody = string `Total Issue Count with label ${githubIssueLabel} in org ${githubOrg} : ${issueData.total_count}${"\n"}${"\n"}`;
    foreach var {title} in issueData.items {
        mailBody += string `Title: ${title}${"\n"}`;
    }
    return mailBody;
}

function getYesterdayDate() returns string|error {
    time:Utc timeNow = time:utcNow();
    log:printInfo("Current UTC time: " + time:utcToString(timeNow));
    time:Civil civil = time:utcToCivil(timeNow);
    civil.utcOffset = (check time:loadSystemZone()).fixedOffset();
    time:Utc currentlocalTime = check time:utcFromCivil(civil);
    log:printInfo("Current local time: " + time:utcToString(currentlocalTime));
    time:Utc yesterdayDate = time:utcAddSeconds(currentlocalTime, -86400);
    string utcStringYesterday = time:utcToString(yesterdayDate);
    log:printInfo("Yesterday's UTC time: " + utcStringYesterday);
    return utcStringYesterday.substring(0, 10);
}
